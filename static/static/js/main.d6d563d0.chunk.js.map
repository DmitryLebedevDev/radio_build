{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseJson","fn","data","JSON","parse","wsClient","openSocket","transports","window","App","audio","useRef","createMainRadio","a","navigator","mediaDevices","getUserMedia","video","stream","peers","handleConnect","id","pc","RTCPeerConnection","console","log","connectionState","addEventListener","_","getAudioTracks","forEach","track","addTrack","createOffer","offer","setLocalDescription","emit","to","from","desc","toJSON","on","handleConnectAns","setRemoteDescription","handleConnectToIces","ices","Promise","all","map","ice","addIceCandidate","receiveRadio","handleConnectDesc","createAnswer","answer","res","onicecandidate","event","candidate","push","off","handleConnectFromIces","handleConnectionstatechange","current","srcObject","MediaStream","getTransceivers","receiver","removeEventListener","useState","radios","setRadios","useEffect","radio","filter","storeRadio","className","ref","controls","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6d563d0.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport openSocket from 'socket.io-client'\n\nfunction parseJson<D, R>(fn: (data: D) => R) {\n  return (data: string) => fn(JSON.parse(data))\n}\n\ninterface Iconnect {\n  to: string\n  from: string\n  desc: RTCSessionDescription\n}\ninterface IconnectIces {\n  to: string,\n  from: string,\n  ices: RTCIceCandidateInit[]\n}\n\nconst wsClient = openSocket(\"http://92.53.120.88:80/\", {\n  transports: ['websocket'],\n});\n(window as any).wsClient = wsClient\n\n// useEffect(() => {\n//   const pc1 = new RTCPeerConnection({'iceServers': [{'urls': 'stun:stun.l.google.com:19302'}]})\n//   const pc2 = new RTCPeerConnection({'iceServers': [{'urls': 'stun:stun.l.google.com:19302'}]})\n//\n//   navigator.mediaDevices\n//     .getUserMedia({\n//       audio: true,\n//       video: false\n//     })\n//     .then((stream) => {\n//       console.log(stream)\n//       stream\n//         .getAudioTracks()\n//         .forEach(\n//           track => pc1.addTrack(track)\n//         )\n//\n//       pc1.createOffer()\n//         .then(async offer => {\n//           await pc1.setLocalDescription(offer)\n//           await pc2.setRemoteDescription(offer)\n//           const answer = await pc2.createAnswer()\n//           await pc2.setLocalDescription(answer)\n//           await pc1.setRemoteDescription(answer)\n//\n//           // pc1.onicecandidate = (event) => {\n//           //   pc2.addIceCandidate(event.candidate as any)\n//           //     .then(() => console.log(event.candidate, 'pc2 add'))\n//           //     .catch(() => console.error(event.candidate, 'pc2 err'))\n//           // }\n//           pc2.onicecandidate = (event) => {\n//             pc1.addIceCandidate(event.candidate as any)\n//               .then(() => console.log(event.candidate, 'pc1 add'))\n//               .catch(() => console.error(event.candidate, 'pc1 err'))\n//           }\n//\n//           pc2.addEventListener('connectionstatechange', event => {\n//             if (pc2.connectionState === 'connected') {\n//               console.log(\"connect\")\n//               console.log(pc2.getTransceivers()[0].receiver.track)\n//               if(audio.current) {\n//                 audio.current.srcObject = new MediaStream(\n//                   pc2.getTransceivers().map(({receiver: {track}}) => track)\n//                 )\n//               }\n//               // Peers connected!\n//             }\n//           });\n//           pc1.addEventListener('connectionstatechange', e => {\n//             console.log(pc1.connectionState)\n//           })\n//         })\n//     })\n// }, [])\n\nfunction App() {\n  const audio = useRef<HTMLAudioElement | null>(null)\n\n  const createMainRadio = async () => {\n    const stream\n      = await navigator\n        .mediaDevices\n        .getUserMedia({\n          audio: true,\n          video: false\n        })\n\n    const peers: Record<string, RTCPeerConnection> = {}\n    const handleConnect\n      = async (id: string) => {\n        const pc = new RTCPeerConnection({\n          'iceServers': [{'urls': 'stun:stun.l.google.com:19302'}]\n        });\n        (window as any).pc = pc;\n        console.log('startConnect', pc.connectionState)\n        pc.addEventListener('connectionstatechange', _ => {\n          console.log(pc.connectionState);\n          if (pc.connectionState === \"closed\") {\n            delete peers[id]\n          }\n        })\n        peers[id] = pc;\n        stream.getAudioTracks().forEach(\n          (track) => pc.addTrack(track)\n        )\n        const offer = await pc.createOffer()\n        await pc.setLocalDescription(offer)\n        wsClient.emit(\"connectDesc\", {\n          to: id,\n          from: wsClient.id,\n          desc: (offer as any).toJSON()\n        })\n      }\n    wsClient.on('connectToRadio', handleConnect)\n\n    const handleConnectAns = parseJson(async ({from, desc}: Iconnect) => {\n      await peers[from].setRemoteDescription(desc)\n    })\n    wsClient.on(\"connectAns\", handleConnectAns)\n\n    const handleConnectToIces = parseJson(async ({from, ices}: IconnectIces) => {\n      await Promise.all(\n        ices.map((ice) => peers[from].addIceCandidate(ice))\n      )\n      await peers[from].addIceCandidate(null as any)\n    })\n    wsClient.on(\"connectToIces\", handleConnectToIces)\n\n    wsClient.emit('createRadio')\n  }\n  const receiveRadio = async (id: string) => {\n    const pc = new RTCPeerConnection({\n      'iceServers': [{'urls': 'stun:stun.l.google.com:19302'}]\n    })\n\n    const handleConnectDesc = parseJson(async ({from, desc}: Iconnect) => {\n      await pc.setRemoteDescription(desc);\n      (window as any).pc = pc;\n      const answer = await pc.createAnswer()\n      await pc.setLocalDescription(answer)\n      wsClient.emit('connectAns', {\n        to: id,\n        from: wsClient.id,\n        desc: (answer as any).toJSON()\n      })\n\n      const ices\n        = await (new Promise((res) => {\n        const ices: RTCIceCandidateInit[] = [];\n        pc.onicecandidate = (event) => {\n          if(event.candidate !== null) {\n            ices.push(event.candidate.toJSON())\n          } else {\n            res(ices)\n          }\n        }\n      }))\n      wsClient.emit(\"connectToIces\", {\n        to: from,\n        from: wsClient.id,\n        ices\n      })\n\n      wsClient.off('connectDesc', handleConnectDesc)\n    })\n    wsClient.on('connectDesc', handleConnectDesc)\n\n    const handleConnectFromIces = parseJson(async ({ices}: IconnectIces) => {\n      console.log(\"remoteIces\", ices)\n      await Promise.all(\n        ices.map(ice => pc.addIceCandidate(ice))\n      )\n      await pc.addIceCandidate(null as any)\n      wsClient.off('connectFromIces', handleConnectFromIces)\n    })\n    wsClient.on('connectFromIces', handleConnectFromIces)\n\n    const handleConnectionstatechange = () => {\n      console.log(pc.connectionState);\n      switch (pc.connectionState) {\n        case \"connected\": {\n          if(audio && audio.current) {\n            debugger\n            audio.current.srcObject = new MediaStream(\n              pc.getTransceivers().map(({receiver: {track}}) => track)\n            )\n          }\n          break\n        }\n        case \"closed\": {\n          if(audio && audio.current) {\n            audio.current.srcObject = null\n          }\n          pc.removeEventListener(\"connectionstatechange\", handleConnectionstatechange)\n        }\n      }\n    }\n    pc.addEventListener('connectionstatechange', handleConnectionstatechange)\n\n    wsClient.emit('connectToRadio', id)\n  }\n\n  const [radios, setRadios] = useState<string[]>([]);\n  useEffect(() => {\n    wsClient.on('activeRadios', parseJson((radios: string[]) => {\n      console.log('activeRadios', radios)\n      setRadios(radios)\n    }))\n    wsClient.on(\"createRadio\", (radio: string) => {\n      setRadios(radios => [...radios, radio])\n    })\n    wsClient.on(\"deleteRadio\", (radio: string) => {\n      setRadios(radios => radios.filter(\n        (storeRadio) => storeRadio !== radio)\n      )\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <audio ref={audio} controls>\n      </audio>\n      <div>\n        {radios.map(id => <button\n          onClick={() => receiveRadio(id)}\n          key={id}\n        >\n          {id}\n        </button>)}\n      </div>\n      <button onClick={createMainRadio}>create main radio</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}